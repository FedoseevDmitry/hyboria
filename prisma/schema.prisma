generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime  @default(now())
  role          String   @default("user")
  canCreateJournals Boolean @default(false)

  accounts      Account[]
  sessions      Session[]
  journals Journal[]

  @@map("user")
}

model Account {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model News {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  created_at DateTime @default(now())

  @@map("news")
}

model WikiArticle {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  created_at DateTime @default(now())

  @@map("wiki")
}

model Journal {
  id          String   @id @default(cuid())
  characterName   String
  userId      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  image       String?
  isPublished Boolean  @default(false)
  slug        String   @unique
  description String

  user  User          @relation(fields: [userId], references: [id])
  posts JournalPost[]

  @@map("journal")
}

model JournalPost {
  id         String   @id @default(cuid())
  journalId  String
  title      String
  content    String
  image      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  journal Journal @relation(fields: [journalId], references: [id])
  @@map("journalPost")
}
